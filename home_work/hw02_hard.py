# Задание-1: уравнение прямой вида y = kx + b задано в виде строки.
# Определить координату y точки с заданной координатой x.

#чтото не понял я задачу
equation = 'y = -12x + 11111140.2121'
x = 2.5
# вычислите и выведите y
y = -12*x + 11111140.2121
print(y)


# Задание-2: Дата задана в виде строки формата 'dd.mm.yyyy'.
# Проверить, корректно ли введена дата.
# Условия корректности:
# 1. День должен приводиться к целому числу в диапазоне от 1 до 30(31)
#  (в зависимости от месяца, февраль не учитываем)
# 2. Месяц должен приводиться к целому числу в диапазоне от 1 до 12
# 3. Год должен приводиться к целому положительному числу в диапазоне от 1 до 9999
# 4. Длина исходной строки для частей должна быть в соответствии с форматом 
#  (т.е. 2 символа для дня, 2 - для месяца, 4 - для года)

# Пример корректной даты
import datetime
date = '01.11.1985'

# Примеры некорректных дат
date = '01.22.1001'
date = '1.12.1001'
date = '-2.10.3001'
def get_date(date):
    day_list = ['первое', 'второе', 'третье', 'четвёртое',
        'пятое', 'шестое', 'седьмое', 'восьмое',
        'девятое', 'десятое', 'одиннадцатое', 'двенадцатое',
        'тринадцатое', 'четырнадцатое', 'пятнадцатое', 'шестнадцатое',
        'семнадцатое', 'восемнадцатое', 'девятнадцатое', 'двадцатое',
        'двадцать первое', 'двадцать второе', 'двадцать третье',
        'двадацать четвёртое', 'двадцать пятое', 'двадцать шестое',
        'двадцать седьмое', 'двадцать восьмое', 'двадцать девятое',
        'тридцатое', 'тридцать первое']
    month_list = ['января', 'февраля', 'марта', 'апреля', 'мая', 'июня',
           'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря']
    date_list = date.split('.')
    day = int(date_list[0])
    month = int(date_list[1])
    year = int(date_list[2])
    if year>1 and year<9999:
        if month < 12 and month > 1 and len(date_list[1])==2:
            if month == 2 or month == 4 or month == 6 or month == 9 or month == 11:
                if len(date_list[0])!=2 or day>30 or day<1:
                    print('Вы указали неправильный день')
                    return
            elif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:
                if len(date_list[0])!=2 or day>31 or day<1:
                    print('Вы указали неправильный день')
                    return
        else:
            print('Вы указали неправильный месяц')
            return
    else:
        print('Вы указали неправильный год')
        return
    return (day_list[int(date_list[0]) - 1] + ' ' +
        month_list[int(date_list[1]) - 1] + ' ' +
        date_list[2] + ' года')
date = input("Введите дату ")
if get_date(date)!=None:
    print(get_date(date))


# Задание-3: "Перевёрнутая башня" (Задача олимпиадного уровня)
#
# Вавилонцы решили построить удивительную башню —
# расширяющуюся к верху и содержащую бесконечное число этажей и комнат.
# Она устроена следующим образом — на первом этаже одна комната,
# затем идет два этажа, на каждом из которых по две комнаты, 
# затем идёт три этажа, на каждом из которых по три комнаты и так далее:
#         ...
#     12  13  14
#     9   10  11
#     6   7   8
#       4   5
#       2   3
#         1
#
# Эту башню решили оборудовать лифтом --- и вот задача:
# нужно научиться по номеру комнаты определять,
# на каком этаже она находится и какая она по счету слева на этом этаже.
#
# Входные данные: В первой строчке задан номер комнаты N, 1 ≤ N ≤ 2 000 000 000.
#
# Выходные данные:  Два целых числа — номер этажа и порядковый номер слева на этаже.
#
# Пример:
# Вход: 13
# Выход: 6 2
#
# Вход: 11
# Выход: 5 3

#с этой задачей мне помог товарищ
def level_offset():
    cur_offset = 1
    next_offset = 2
    num_block = 1
    level = 1
    while True:
        yield (cur_offset, next_offset, num_block, level)
        level += num_block
        num_block += 1
        cur_offset = next_offset
        next_offset += num_block**2

N = int(input('Input N:'))
for cur_offset, next_offset, num_block, level in level_offset():
    if N>=cur_offset and N<next_offset:
        row = (N-cur_offset)//num_block + level
        col = (N-cur_offset)%num_block + 1
        break

print(f'ROW: {row}')
print(f'COL: {col}')
